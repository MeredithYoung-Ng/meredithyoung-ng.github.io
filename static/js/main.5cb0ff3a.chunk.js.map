{"version":3,"sources":["imgs/profile.jpg","imgs/tiletunes.png","imgs/discobot.png","imgs/pvdcm.png","imgs/wicshistory.png","resume.pdf","Body.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Body","props","updateAboutPage","event","preventDefault","setState","page","index","updatePortfolioPage","state","className","type","onClick","this","id","href","resume","target","rel","src","profile","alt","tiletunes","discobot","pvdcm","wicshistory","renderAbout","renderPortfolio","renderHeader","renderPageBody","Component","current_page","name","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yFAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,wSC0J5BC,E,YAjJb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAORC,gBAAkB,SAAAC,GAChBA,EAAMC,iBAEN,EAAKC,SAAS,CACZC,KAAM,EAAKL,MAAMK,KAAK,GAAGC,SAZV,EAgBnBC,oBAAsB,SAAAL,GACpBA,EAAMC,iBAEN,EAAKC,SAAS,CACZC,KAAM,EAAKL,MAAMK,KAAK,GAAGC,SAjB3B,EAAKE,MAAQ,CACXH,KAAM,EAAKL,MAAMK,KAAK,GAAGC,OAJV,E,4EAyBjB,OACE,4BAAQG,UAAU,cAChB,6BACE,4BAAQC,KAAK,SAASC,QAASC,KAAKX,gBACpCQ,UAAU,mBADV,sBAKF,yBAAKA,UAAU,oBACb,4BAAQC,KAAK,SAASC,QAASC,KAAKX,iBAClC,0BAAMY,GAAG,gBAAT,UAEF,4BAAQH,KAAK,SAASC,QAASC,KAAKL,qBAClC,0BAAMM,GAAG,gBAAT,a,oCAQR,OACE,yBAAKJ,UAAU,YACb,yBAAKA,UAAU,gBACb,iDACA,sFACA,yBAAKA,UAAU,qBACb,4cAOA,uBAAGA,UAAU,wBAAb,4KAKF,yBAAKA,UAAU,wBACb,uBAAGA,UAAU,cAAcK,KAAK,KAChCH,QAASC,KAAKL,qBADd,QAEA,uBAAGO,KAAMC,IAAQC,OAAO,SAASC,IAAI,sBACrCR,UAAU,eADV,YAMJ,yBAAKA,UAAU,gBACb,yBAAKS,IAAKC,IAASC,IAAI,YACvB,yBAAKX,UAAU,qBACb,2BAAG,0BAAMI,GAAG,mBAAT,aAAH,yBACA,2BAAG,0BAAMA,GAAG,mBAAT,cAAH,2BACA,2BAAG,0BAAMA,GAAG,mBAAT,UAAH,2D,wCASR,OACE,yBAAKJ,UAAU,sBACb,uEAA4C,wCAC5C,yBAAKA,UAAU,4BACb,6BACE,2BAAOC,KAAK,QAAQQ,IAAKG,IAAWD,IAAI,eACxC,0CACA,iDAEF,6BACE,2BAAOV,KAAK,QAAQQ,IAAKI,IAAUF,IAAI,cACvC,yCACA,iDAEF,6BACE,2BAAOV,KAAK,QAAQQ,IAAKK,IAAOH,IAAI,0CAEpC,qEACA,qCAEF,6BACE,2BAAOV,KAAK,QAAQQ,IAAKM,IAAaJ,IAAI,iBAC1C,4CACA,mD,uCAQR,OAAwB,IAApBR,KAAKJ,MAAMH,KAEX,6BAAMO,KAAKa,eAEgB,IAApBb,KAAKJ,MAAMH,KAElB,6BAAMO,KAAKc,mBAIX,yBAAKjB,UAAU,YACb,2D,+BAON,OACE,6BACGG,KAAKe,eACLf,KAAKgB,sB,GA5IKC,aCJbC,EAAe,CACnB,CAAEC,KAAM,QAASzB,MAAO,GACxB,CAAEyB,KAAM,YAAazB,MAAO,IAWf0B,MARf,WACE,OACE,yBAAKvB,UAAU,OACb,kBAAC,EAAD,CAAMJ,KAAMyB,MCAEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5cb0ff3a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.5708702c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/tiletunes.adcf1fd9.png\";","module.exports = __webpack_public_path__ + \"static/media/discobot.5d70dc8d.png\";","module.exports = __webpack_public_path__ + \"static/media/pvdcm.c1419593.png\";","module.exports = __webpack_public_path__ + \"static/media/wicshistory.fbdd9f9c.png\";","module.exports = __webpack_public_path__ + \"static/media/resume.111c4b87.pdf\";","import React, { Component } from 'react';\nimport profile from './imgs/profile.jpg';\nimport tiletunes from './imgs/tiletunes.png';\nimport discobot from './imgs/discobot.png';\nimport pvdcm from './imgs/pvdcm.png';\nimport wicshistory from './imgs/wicshistory.png';\nimport resume from './resume.pdf';\n\nclass Body extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      page: this.props.page[0].index\n    }\n  }\n\n  updateAboutPage = event => {\n    event.preventDefault();\n\n    this.setState({\n      page: this.props.page[0].index\n    });\n  }\n\n  updatePortfolioPage = event => {\n    event.preventDefault();\n\n    this.setState({\n      page: this.props.page[1].index\n    });\n  }\n\n  renderHeader() {\n    return(\n      <header className=\"App-header\">\n        <div>\n          <button type=\"button\" onClick={this.updateAboutPage}\n          className=\"App-header-name\">\n            meredith young-ng\n          </button>\n        </div>\n        <div className=\"App-header-pages\">\n          <button type=\"button\" onClick={this.updateAboutPage}>\n            <span id=\"headerActive\">about</span>\n          </button>\n          <button type=\"button\" onClick={this.updatePortfolioPage}>\n            <span id=\"headerActive\">work</span>\n          </button>\n        </div>\n      </header>\n    );\n  }\n\n  renderAbout() {\n    return(\n      <div className=\"App-body\">\n        <div className=\"App-body-bio\">\n          <h1>hi, i'm meredith.</h1>\n          <h2>engineer • designer • writer • creator.</h2>\n          <div className=\"App-body-bio-text\">\n            <p>I’m a M.S. student at Brown University, studying computer\n            science. Currently, I work on smartphone augmented reality research\n            with Jeff Huang. Previously, I worked on simulating a 3D crocheting\n            machine and other textiles in the Cornell Graphics and Vision Lab\n            with Steve Marschner and François Guimbretière. I’m excited by\n            interdisciplinary research, particularly at the intersection of\n            computer graphics and HCI.</p>\n            <p className=\"App-body-bio-hobbies\">When I’m not in the lab,\n            you can find me practicing violin in Steinert, working on\n            engineering-related diversity outreach, or reading and writing\n            personal essays.</p>\n          </div>\n          <div className=\"App-body-bio-buttons\">\n            <a className=\"Button-work\" href=\"/#\"\n            onClick={this.updatePortfolioPage}>work</a>\n            <a href={resume} target=\"_blank\" rel=\"noopener noreferrer\"\n            className=\"Button-work\">\n              resume\n            </a>\n          </div>\n        </div>\n        <div className=\"App-body-pic\">\n          <img src={profile} alt=\"Profile\"/>\n          <div className=\"App-body-pic-info\">\n            <p><span id=\"App-body-status\">currently</span>: brown m.s. ‘21</p>\n            <p><span id=\"App-body-status\">previously</span>: cornell b.s. ’19</p>\n            <p><span id=\"App-body-status\">future</span>: research intern @ ge\n            global research, summer '20</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  renderPortfolio() {\n    return(\n      <div className=\"App-body-portfolio\">\n        <h2>my design philosophy: ideate, research, <i>iterate!</i></h2>\n        <div className=\"App-body-portfolio-items\">\n          <div>\n            <input type=\"image\" src={tiletunes} alt=\"Tile Tunes\"/>\n            <h3>Tile Tunes</h3>\n            <p>HCI, UI/UX, Music</p>\n          </div>\n          <div>\n            <input type=\"image\" src={discobot} alt=\"Disco Bot\"/>\n            <h3>Disco Bot</h3>\n            <p>HRI, UI/UX, Music</p>\n          </div>\n          <div>\n            <input type=\"image\" src={pvdcm} alt=\"Providence Children's Museum\n            Redesign\"/>\n            <h3>Providence Children's Museum Redesign</h3>\n            <p>UI/UX</p>\n          </div>\n          <div>\n            <input type=\"image\" src={wicshistory} alt=\"WiCS History\"/>\n            <h3>WiCS History</h3>\n            <p>UI/UX, Outreach</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  renderPageBody() {\n    if (this.state.page === 0) {\n      return(\n        <div>{this.renderAbout()}</div>\n      );\n    } else if (this.state.page === 1) {\n      return(\n        <div>{this.renderPortfolio()}</div>\n      );\n    } else {\n      return(\n        <div className=\"App-body\">\n          <p>This page does not exist.</p>\n        </div>\n      );\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        {this.renderHeader()}\n        {this.renderPageBody()}\n      </div>\n    );\n  }\n}\n\nexport default Body;\n","import React from 'react';\nimport './App.css';\nimport Body from './Body'\n\nconst current_page = [\n  { name: \"about\", index: 0 },\n  { name: \"portfolio\", index: 1}\n];\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Body page={current_page}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}