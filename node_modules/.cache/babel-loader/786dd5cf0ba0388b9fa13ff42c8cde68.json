{"ast":null,"code":"var _jsxFileName = \"/Users/meredith/Desktop/website/src/TileTunes.jsx\";\nimport React, { Component } from 'react';\nimport tiletunesdemo from './tile_tunes_demo.mp4';\nimport tiletunes from './imgs/tiletunes.png';\nimport tiletunesdoc from './tile_tunes_report.pdf';\nimport tiletunesdesign from './imgs/tiletunes-initial.png';\nimport tiletunescardboard from './imgs/tiletunes-cardboard.png';\nimport tiletuneslego from './imgs/tiletunes-lego.png';\nimport tiletunesinitialCAD from './imgs/tiletunes-initialCAD.png';\nimport tiletunesprototype1 from './imgs/tiletunes-prototype1.png';\n\nclass TileTunes extends Component {\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App-body-project\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \"Tile Tunes\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, \"Aug. \\u2013 Dec. 2018\"), React.createElement(\"div\", {\n      className: \"App-body-project-video\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, React.createElement(\"video\", {\n      className: \"video-js\",\n      controls: true,\n      preload: \"auto\",\n      poster: tiletunes,\n      \"data-setup\": '{}',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, React.createElement(\"source\", {\n      src: tiletunesdemo,\n      type: \"video/mp4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }), \"Your browser does not support the video tag.\")), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \"Introduction\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, \"We live in a world with hundreds of instruments\\u2014ways one can physically create music. Musical compositions often begin by writing down notes on a sheet of paper or computer software. This creative process, however, is noticeably more removed from the physical realm of playing the music on an instrument. In addition, music visualization is often disconnected from tangible interaction. We seek to bridge this gap between musical ideas and the tangible world through physical computing that fosters creativity.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }), \"Introducing Tile Tunes: a robot that moves along a user-drawn track (two black lines), reading and interpreting colored paper \\u2018tiles\\u2019 along the track as musical notes. Two IR sensors at the front of the robot follow the drawn track while a color sensor searches for and interprets the colored tiles. When a color is interpreted as a musical note, the respective note is visually displayed on an OLED screen and sent to an audio breakout board, which outputs the note\\u2019s sound through a connected speaker. Users can quickly make and modify their own musical compositions in real-time by moving colored tiles around the track.\"), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"Overview\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"1. Related Work\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }), \"2. Initial Design\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }), \"3. Low-Fidelity Prototypes\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }), \"4. Initial High-Fidelity Prototype\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), \"5. Final High-Fidelity Prototype\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), \"6. Reflection & Future Work\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), \"This project was done in collaboration with Melissa Avila and Alan Lee. I was primarily responsible for the electrical and microcontroller components of the project. My own personal goals for Tile Tunes were to gain experience working on user experience-focused projects, and learning how to approach engineering with a design-focused mindset.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), \"View the full documentation\\xA0\", React.createElement(\"a\", {\n      href: tiletunesdoc,\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"here\"), \". Our code can be also be found on\\xA0\", React.createElement(\"a\", {\n      href: \"https://github.com/MeredithYoung-Ng/Tile-Tunes\",\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"GitHub\"), \".\"), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"Related Work\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Our work is primarily inspired by Yuri Suzuki\\u2019s Colour Chaser project, a vehicle that follows a freely-drawn black line track and translates non-black lines (drawn over the track) into different musical pitches [1]. In addition, other work such as Specdrums [2], EyeMusic [3] and chromesthesia [4-5] translate color to pitch. Overall, Tile Tunes focuses on the intersection of the broader research areas of physical music composition and intelligent physical systems.\"), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Initial Design\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Our original idea for this project was a robot that reads colored tiles along a fixed-width expandable railed track. Each colored tile would correspond to a different musical note processed in real-time, visualized on an OLED display and played on a speaker connected to an audio breakout board.\"), React.createElement(\"div\", {\n      className: \"App-body-tiletunes-pics\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: tiletunesdesign,\n      alt: \"Initial Design\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Ultimately, after feedback from potential users, we determined that a free-drawn track would enable the user to have more creative freedom. We then incorporated this idea into our low-fidelity prototype.\"), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Low-Fidelity Prototypes\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"We proceeded to build several low-fidelity prototypes with cardboard and LEGOs, as shown below. We performed simple Wizard-of-Oz testing to simulate user interactions, ensuring that our design focused on improving the tangible user experience of musical composition.\"), React.createElement(\"div\", {\n      className: \"App-body-tiletunes-pics\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      id: \"leftimg\",\n      src: tiletunescardboard,\n      alt: \"Cardboard Prototype\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      src: tiletuneslego,\n      alt: \"LEGO Prototype\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    })), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Initial High-Fidelity Prototype\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Incorporating feedback from our low-fidelity prototype testing into our next iteration, we proceeded to build our first high-fidelity prototype.\"), React.createElement(\"div\", {\n      className: \"App-body-tiletunes-pics\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      id: \"leftimg\",\n      src: tiletunesinitialCAD,\n      alt: \"Initial CAD\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      src: tiletunesprototype1,\n      alt: \"First High-Fidelity Prototype\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Our initial CAD (Figure 5) featured a T-slotted wooden box design, with mounts for the motors at the front and the ball casters at the back. We planned to have all of our electronics mounted on the top of the box, but realized we needed additional space and incorporated a second mount.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), \"As our robot moves along the track, the TCS34725 color sensor continuously reads colors from tiles along the track, sending input via I2C to the RedBear Duo microcontroller, which checks if the colors satisfy one of the predetermined HSL (Hue Saturation Lightness) ranges. The RedBear then maps each detected color to its respective note letter, and visually outputs it on the Adafruit SSD1331 OLED display via SPI. \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), \"A second RedBear Duo microcontroller controls the motors via a simple line-tracking algorithm based on the IR sensor readings.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), \"For this prototype, we drew a single-lined track with a black Sharpie, adding black lines to our colored tiles to prevent the IR sensors from misinterpreting the tiles as the track. However, having paper taped down was problematic in terms of reusability (the colored paper rips upon removal), and also restricted a user\\u2019s ability to make quick modifications to their track.\"), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"Final High-Fidelity Prototype\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Since our audio breakout board wasn\\u2019t supported by the RedBear, we replaced the primary RedBear Duo with an Adafruit Feather M4, which has a faster processor. Ultimately, we achieved full color, visual, and audio integration. While we initially planned to play MP3 files, we switched to MIDI and a portable speaker to achieve a crisper sound. To accommodate all of these new electronic components on our robot, we redesigned our robot with a more compact acrylic three-tiered box frame.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), \"We also redesigned our track with two black lines, facilitating easier musical tile composition. The tiles were redesigned with label paper, as it was easy to print on, stuck flat to the track, was sticky enough to be reused, and did not rip easily on removal. Now, color tiles could simply be placed in between the lines.\"));\n  }\n\n}\n\nexport default TileTunes;","map":{"version":3,"sources":["/Users/meredith/Desktop/website/src/TileTunes.jsx"],"names":["React","Component","tiletunesdemo","tiletunes","tiletunesdoc","tiletunesdesign","tiletunescardboard","tiletuneslego","tiletunesinitialCAD","tiletunesprototype1","TileTunes","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport tiletunesdemo from './tile_tunes_demo.mp4';\nimport tiletunes from './imgs/tiletunes.png';\nimport tiletunesdoc from './tile_tunes_report.pdf';\nimport tiletunesdesign from './imgs/tiletunes-initial.png';\nimport tiletunescardboard from './imgs/tiletunes-cardboard.png';\nimport tiletuneslego from './imgs/tiletunes-lego.png';\nimport tiletunesinitialCAD from './imgs/tiletunes-initialCAD.png';\nimport tiletunesprototype1 from './imgs/tiletunes-prototype1.png';\n\nclass TileTunes extends Component {\n  render() {\n    return (\n      <div className=\"App-body-project\">\n        <h2>Tile Tunes</h2>\n        <h3>Aug. – Dec. 2018</h3>\n        <div className=\"App-body-project-video\">\n          <video className=\"video-js\" controls preload=\"auto\" poster={tiletunes}\n          data-setup={'{}'}>\n            <source src={tiletunesdemo} type=\"video/mp4\" />\n            Your browser does not support the video tag.\n          </video>\n        </div>\n        <h4>Introduction</h4>\n        <p>We live in a world with hundreds of instruments—ways one can\n          physically create music. Musical compositions often begin by writing\n          down notes on a sheet of paper or computer software. This creative\n          process, however, is noticeably more removed from the physical realm\n          of playing the music on an instrument. In addition, music\n          visualization is often disconnected from tangible interaction. We\n          seek to bridge this gap between musical ideas and the tangible world\n          through physical computing that fosters creativity.<br /><br />\n          Introducing Tile Tunes: a robot that moves along a user-drawn track\n          (two black lines), reading and interpreting colored paper ‘tiles’\n          along the track as musical notes. Two IR sensors at the front of the\n          robot follow the drawn track while a color sensor searches for and\n          interprets the colored tiles. When a color is interpreted as a\n          musical note, the respective note is visually displayed on an OLED\n          screen and sent to an audio breakout board, which outputs the note’s\n          sound through a connected speaker. Users can quickly make and modify\n          their own musical compositions in real-time by moving colored tiles\n          around the track.\n        </p>\n        <h4>Overview</h4>\n        <p>1. Related Work<br />\n          2. Initial Design<br />\n          3. Low-Fidelity Prototypes<br />\n          4. Initial High-Fidelity Prototype<br />\n          5. Final High-Fidelity Prototype<br />\n          6. Reflection & Future Work<br /><br />\n          This project was done in collaboration with Melissa Avila and Alan\n          Lee. I was primarily responsible for the electrical and\n          microcontroller components of the project. My own personal goals for\n          Tile Tunes were to gain experience working on user experience-focused\n          projects, and learning how to approach engineering with a\n          design-focused mindset.<br /><br />\n          View the full documentation&nbsp;\n          <a href={tiletunesdoc} target=\"_blank\" rel=\"noopener noreferrer\">\n            here\n          </a>. Our code can be also be found on&nbsp;\n          <a href=\"https://github.com/MeredithYoung-Ng/Tile-Tunes\"\n          target=\"_blank\" rel=\"noopener noreferrer\">\n            GitHub\n          </a>.\n        </p>\n        <h4>Related Work</h4>\n        <p>Our work is primarily inspired by Yuri Suzuki’s Colour Chaser\n          project, a vehicle that follows a freely-drawn black line track and\n          translates non-black lines (drawn over the track) into different\n          musical pitches [1]. In addition, other work such as Specdrums [2],\n          EyeMusic [3] and chromesthesia [4-5] translate color to pitch.\n          Overall, Tile Tunes focuses on the intersection of the broader\n          research areas of physical music composition and intelligent physical\n          systems.\n        </p>\n        <h4>Initial Design</h4>\n        <p>Our original idea for this project was a robot that reads colored\n          tiles along a fixed-width expandable railed track. Each colored tile\n          would correspond to a different musical note processed in real-time,\n          visualized on an OLED display and played on a speaker connected to an\n          audio breakout board.\n        </p>\n        <div className=\"App-body-tiletunes-pics\">\n          <img src={tiletunesdesign} alt=\"Initial Design\"/>\n        </div>\n        <p>Ultimately, after feedback from potential users, we determined that\n          a free-drawn track would enable the user to have more creative\n          freedom. We then incorporated this idea into our low-fidelity\n          prototype.\n        </p>\n        <h4>Low-Fidelity Prototypes</h4>\n        <p>We proceeded to build several low-fidelity prototypes with cardboard\n          and LEGOs, as shown below. We performed simple Wizard-of-Oz testing to\n          simulate user interactions, ensuring that our design focused on\n          improving the tangible user experience of musical composition.\n        </p>\n        <div className=\"App-body-tiletunes-pics\">\n          <img id=\"leftimg\" src={tiletunescardboard} alt=\"Cardboard Prototype\"/>\n          <img src={tiletuneslego} alt=\"LEGO Prototype\"/>\n        </div>\n        <h4>Initial High-Fidelity Prototype</h4>\n        <p>Incorporating feedback from our low-fidelity prototype testing into\n          our next iteration, we proceeded to build our first high-fidelity\n          prototype.\n        </p>\n        <div className=\"App-body-tiletunes-pics\">\n          <img id=\"leftimg\" src={tiletunesinitialCAD} alt=\"Initial CAD\"/>\n          <img src={tiletunesprototype1} alt=\"First High-Fidelity Prototype\"/>\n        </div>\n        <p>Our initial CAD (Figure 5) featured a T-slotted wooden box design,\n          with mounts for the motors at the front and the ball casters at the\n          back. We planned to have all of our electronics mounted on the top of\n          the box, but realized we needed additional space and incorporated a\n          second mount.<br /><br />\n          As our robot moves along the track, the TCS34725 color sensor\n          continuously reads colors from tiles along the track, sending input\n          via I2C to the RedBear Duo microcontroller, which checks if the\n          colors satisfy one of the predetermined HSL (Hue Saturation\n          Lightness) ranges. The RedBear then maps each detected color to\n          its respective note letter, and visually outputs it on the Adafruit\n          SSD1331 OLED display via SPI. <br /><br />\n          A second RedBear Duo microcontroller controls the motors via a simple\n          line-tracking algorithm based on the IR sensor readings.<br /><br />\n          For this prototype, we drew a single-lined track with a black\n          Sharpie, adding black lines to our colored tiles to prevent the IR\n          sensors from misinterpreting the tiles as the track. However, having\n          paper taped down was problematic in terms of reusability (the colored\n          paper rips upon removal), and also restricted a user’s ability to\n          make quick modifications to their track.\n        </p>\n        <h4>Final High-Fidelity Prototype</h4>\n        <p>Since our audio breakout board wasn’t supported by the RedBear, we\n          replaced the primary RedBear Duo with an Adafruit Feather M4, which\n          has a faster processor. Ultimately, we achieved full color, visual,\n          and audio integration. While we initially planned to play MP3 files,\n          we switched to MIDI and a portable speaker to achieve a crisper\n          sound. To accommodate all of these new electronic components on our\n          robot, we redesigned our robot with a more compact acrylic\n          three-tiered box frame.<br /><br />\n          We also redesigned our track with two black lines, facilitating\n          easier musical tile composition. The tiles were redesigned with label\n          paper, as it was easy to print on, stuck flat to the track, was\n          sticky enough to be reused, and did not rip easily on removal. Now,\n          color tiles could simply be placed in between the lines.   \n        </p>\n      </div>\n    );\n  }\n}\n\nexport default TileTunes;\n"]},"metadata":{},"sourceType":"module"}